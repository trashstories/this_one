{"title":"16: (Normal) Hierarchical Models without Predictors","markdown":{"yaml":{"title":"16: (Normal) Hierarchical Models without Predictors","editor_options":{"chunk_output_type":"console"}},"headingText":"Load packages","containsRefs":false,"markdown":"\n\n```{r, warning=FALSE, message=FALSE}\n\nlibrary(bayesrules)\nlibrary(tidyverse)\nlibrary(rstanarm)\nlibrary(bayesplot)\nlibrary(tidybayes)\nlibrary(broom.mixed)\nlibrary(forcats)\n\n# Load data\ndata(spotify)\n\nspotify <- spotify %>% \n  select(artist, title, popularity) %>% \n  mutate(artist = fct_reorder(artist, popularity, .fun = 'mean'))\n\n# First few rows\nhead(spotify, 3)\n\n# Number of songs\nnrow(spotify)\n\n# Number of artists\nnlevels(spotify$artist)\n\nartist_means <- spotify %>% \n  group_by(artist) %>% \n  summarize(count = n(), popularity = mean(popularity))\n\nartist_means %>%\n  slice(1:2, 43:44)\n\n```\n\n# 16.1 Complete pooled model\n\n```{r, cache=TRUE}\n\nhead(artist_means, 2)\n\nartist_means %>% \n  summarize(min(count), max(count))\n\nggplot(spotify, aes(x = popularity)) + \n  geom_density()\n\nspotify_complete_pooled <- stan_glm(\n  popularity ~ 1, \n  data = spotify, family = gaussian, \n  prior_intercept = normal(50, 2.5, autoscale = TRUE),\n  prior_aux = exponential(1, autoscale = TRUE),\n  chains = 4, iter = 5000*2, seed = 84735)\n\n# Get prior specifications\nprior_summary(spotify_complete_pooled)\n\ncomplete_summary <- tidy(spotify_complete_pooled, \n                         effects = c(\"fixed\", \"aux\"), \n                         conf.int = TRUE, conf.level = 0.80)\ncomplete_summary\n\nset.seed(84735)\npredictions_complete <- posterior_predict(spotify_complete_pooled,\n                                          newdata = artist_means)\n\nppc_intervals(artist_means$popularity, yrep = predictions_complete,\n              prob_outer = 0.80) +\n  ggplot2::scale_x_continuous(labels = artist_means$artist,\n                              breaks = 1:nrow(artist_means)) +\n  xaxis_text(angle = 90, hjust = 1)\n\n```\n\n# 16.2 No pooled model\n\n```{r, cache=TRUE}\n\nggplot(spotify, aes(x = popularity, group = artist)) + \n  geom_density()\n\nspotify_no_pooled <- stan_glm(\n  popularity ~ artist - 1, \n  data = spotify, family = gaussian, \n  prior = normal(50, 2.5, autoscale = TRUE),\n  prior_aux = exponential(1, autoscale = TRUE),\n  chains = 4, iter = 5000*2, seed = 84735)\n\n# Simulate the posterior predictive models\nset.seed(84735)\npredictions_no <- posterior_predict(\n  spotify_no_pooled, newdata = artist_means)\n  \n# Plot the posterior predictive intervals\nppc_intervals(artist_means$popularity, yrep = predictions_no, \n              prob_outer = 0.80) +\n  ggplot2::scale_x_continuous(labels = artist_means$artist, \n                              breaks = 1:nrow(artist_means)) +\n  xaxis_text(angle = 90, hjust = 1)\n\n```\n\n# 16.3 Building the hierarchical model\n\n```{r}\n\nggplot(artist_means, aes(x = popularity)) + \n  geom_density()\n\n```\n\n# 16.4 Posterior analysis\n\n```{r, cache=TRUE}\n\nspotify_hierarchical <- stan_glmer(\n  popularity ~ (1 | artist), \n  data = spotify, family = gaussian,\n  prior_intercept = normal(50, 2.5, autoscale = TRUE),\n  prior_aux = exponential(1, autoscale = TRUE),\n  prior_covariance = decov(reg = 1, conc = 1, shape = 1, scale = 1),\n  chains = 4, iter = 5000*2, seed = 84735)\n\n# Confirm the prior tunings\nprior_summary(spotify_hierarchical)\n\nmcmc_trace(spotify_hierarchical)\nmcmc_dens_overlay(spotify_hierarchical)\nmcmc_acf(spotify_hierarchical)\nneff_ratio(spotify_hierarchical)\nrhat(spotify_hierarchical)\n\npp_check(spotify_hierarchical) + \n  xlab(\"popularity\")\n\n# Store the simulation in a data frame\nspotify_hierarchical_df <- as.data.frame(spotify_hierarchical)\n\n# Check out the first 3 and last 3 parameter labels\nspotify_hierarchical_df %>% \n  colnames() %>% \n  as.data.frame() %>% \n  slice(1:3, 45:47)\n\n```\n\n## 16.4.2 Posterior analysis of global parameters\n\n```{r}\n\ntidy(spotify_hierarchical, effects = \"fixed\", \n     conf.int = TRUE, conf.level = 0.80)\n\ntidy(spotify_hierarchical, effects = \"ran_pars\")\n\n15.1^2 / (15.1^2 + 14.0^2)\n\n14.0^2 / (15.1^2 + 14.0^2)\n\n```\n\n## 16.4.3 Posterior analysis of group-specific parameters\n\n```{r}\n\nartist_summary <- tidy(spotify_hierarchical, effects = \"ran_vals\", \n                       conf.int = TRUE, conf.level = 0.80)\n\n# Check out the results for the first & last 2 artists\nartist_summary %>% \n  select(level, conf.low, conf.high) %>% \n  slice(1:2, 43:44)\n\n# Get MCMC chains for each mu_j\nartist_chains <- spotify_hierarchical %>%\n  spread_draws(`(Intercept)`, b[,artist]) %>% \n  mutate(mu_j = `(Intercept)` + b) \n\n# Check it out\nartist_chains %>% \n  select(artist, `(Intercept)`, b, mu_j) %>% \n  head(4)\n\n# Get posterior summaries for mu_j\nartist_summary_scaled <- artist_chains %>% \n  select(-`(Intercept)`, -b) %>% \n  mean_qi(.width = 0.80) %>% \n  mutate(artist = fct_reorder(artist, mu_j))\n\n# Check out the results\nartist_summary_scaled %>% \n  select(artist, mu_j, .lower, .upper) %>% \n  head(4)\n\nggplot(artist_summary_scaled, \n       aes(x = artist, y = mu_j, ymin = .lower, ymax = .upper)) +\n  geom_pointrange() +\n  xaxis_text(angle = 90, hjust = 1)\n\nartist_means %>% \n  filter(artist %in% c(\"Frank Ocean\", \"Lil Skies\"))\n\n```\n\n# 16.5 Posterior prediction\n\n```{r}\n\n# Simulate Ocean's posterior predictive model\nset.seed(84735)\nocean_chains <- spotify_hierarchical_df %>%\n  rename(b = `b[(Intercept) artist:Frank_Ocean]`) %>% \n  select(`(Intercept)`, b, sigma) %>% \n  mutate(mu_ocean = `(Intercept)` + b,\n         y_ocean = rnorm(20000, mean = mu_ocean, sd = sigma))\n\n# Check it out\nhead(ocean_chains, 3)\n\n# Posterior summary of Y_new,j\nocean_chains %>% \n  mean_qi(y_ocean, .width = 0.80)    \n\n# Posterior summary of mu_j\nartist_summary_scaled %>% \n  filter(artist == \"artist:Frank_Ocean\")\n\nset.seed(84735)\nmohsen_chains <- spotify_hierarchical_df %>%\n  mutate(sigma_mu = sqrt(`Sigma[artist:(Intercept),(Intercept)]`),\n         mu_mohsen = rnorm(20000, `(Intercept)`, sigma_mu),\n         y_mohsen = rnorm(20000, mu_mohsen, sigma))\n\n# Posterior predictive summaries\nmohsen_chains %>% \n  mean_qi(y_mohsen, .width = 0.80)\n\nset.seed(84735)\nprediction_shortcut <- posterior_predict(\n  spotify_hierarchical,\n  newdata = data.frame(artist = c(\"Frank Ocean\", \"Mohsen Beats\")))\n\n# Posterior predictive model plots\nmcmc_areas(prediction_shortcut, prob = 0.8) +\n  ggplot2::scale_y_discrete(labels = c(\"Frank Ocean\", \"Mohsen Beats\"))\n\n```\n\n# 16.6 Shrinkage & the bias-variance trade-off\n\n```{r}\n\nset.seed(84735)\npredictions_hierarchical <- posterior_predict(spotify_hierarchical, \n                                              newdata = artist_means)\n\n# Posterior predictive plots\nppc_intervals(artist_means$popularity, yrep = predictions_hierarchical, \n              prob_outer = 0.80) +\n  ggplot2::scale_x_continuous(labels = artist_means$artist, \n                              breaks = 1:nrow(artist_means)) +\n  xaxis_text(angle = 90, hjust = 1) + \n  geom_hline(yintercept = 58.4, linetype = \"dashed\")\n\nartist_means %>% \n  filter(artist %in% c(\"Camila Cabello\", \"Lil Skies\"))\n\n```\n\n# 16.7 Not everything is hierarchical\n\n```{r}\n\ndata(bikes)\nbikes %>% \n  select(rides, weekend) %>% \n  head(3)\n\nbikes %>%\n  group_by(weekend) %>% \n  tally()\n\n\n\n```\n\n","srcMarkdownNoYaml":"\n\n```{r, warning=FALSE, message=FALSE}\n\n# Load packages\nlibrary(bayesrules)\nlibrary(tidyverse)\nlibrary(rstanarm)\nlibrary(bayesplot)\nlibrary(tidybayes)\nlibrary(broom.mixed)\nlibrary(forcats)\n\n# Load data\ndata(spotify)\n\nspotify <- spotify %>% \n  select(artist, title, popularity) %>% \n  mutate(artist = fct_reorder(artist, popularity, .fun = 'mean'))\n\n# First few rows\nhead(spotify, 3)\n\n# Number of songs\nnrow(spotify)\n\n# Number of artists\nnlevels(spotify$artist)\n\nartist_means <- spotify %>% \n  group_by(artist) %>% \n  summarize(count = n(), popularity = mean(popularity))\n\nartist_means %>%\n  slice(1:2, 43:44)\n\n```\n\n# 16.1 Complete pooled model\n\n```{r, cache=TRUE}\n\nhead(artist_means, 2)\n\nartist_means %>% \n  summarize(min(count), max(count))\n\nggplot(spotify, aes(x = popularity)) + \n  geom_density()\n\nspotify_complete_pooled <- stan_glm(\n  popularity ~ 1, \n  data = spotify, family = gaussian, \n  prior_intercept = normal(50, 2.5, autoscale = TRUE),\n  prior_aux = exponential(1, autoscale = TRUE),\n  chains = 4, iter = 5000*2, seed = 84735)\n\n# Get prior specifications\nprior_summary(spotify_complete_pooled)\n\ncomplete_summary <- tidy(spotify_complete_pooled, \n                         effects = c(\"fixed\", \"aux\"), \n                         conf.int = TRUE, conf.level = 0.80)\ncomplete_summary\n\nset.seed(84735)\npredictions_complete <- posterior_predict(spotify_complete_pooled,\n                                          newdata = artist_means)\n\nppc_intervals(artist_means$popularity, yrep = predictions_complete,\n              prob_outer = 0.80) +\n  ggplot2::scale_x_continuous(labels = artist_means$artist,\n                              breaks = 1:nrow(artist_means)) +\n  xaxis_text(angle = 90, hjust = 1)\n\n```\n\n# 16.2 No pooled model\n\n```{r, cache=TRUE}\n\nggplot(spotify, aes(x = popularity, group = artist)) + \n  geom_density()\n\nspotify_no_pooled <- stan_glm(\n  popularity ~ artist - 1, \n  data = spotify, family = gaussian, \n  prior = normal(50, 2.5, autoscale = TRUE),\n  prior_aux = exponential(1, autoscale = TRUE),\n  chains = 4, iter = 5000*2, seed = 84735)\n\n# Simulate the posterior predictive models\nset.seed(84735)\npredictions_no <- posterior_predict(\n  spotify_no_pooled, newdata = artist_means)\n  \n# Plot the posterior predictive intervals\nppc_intervals(artist_means$popularity, yrep = predictions_no, \n              prob_outer = 0.80) +\n  ggplot2::scale_x_continuous(labels = artist_means$artist, \n                              breaks = 1:nrow(artist_means)) +\n  xaxis_text(angle = 90, hjust = 1)\n\n```\n\n# 16.3 Building the hierarchical model\n\n```{r}\n\nggplot(artist_means, aes(x = popularity)) + \n  geom_density()\n\n```\n\n# 16.4 Posterior analysis\n\n```{r, cache=TRUE}\n\nspotify_hierarchical <- stan_glmer(\n  popularity ~ (1 | artist), \n  data = spotify, family = gaussian,\n  prior_intercept = normal(50, 2.5, autoscale = TRUE),\n  prior_aux = exponential(1, autoscale = TRUE),\n  prior_covariance = decov(reg = 1, conc = 1, shape = 1, scale = 1),\n  chains = 4, iter = 5000*2, seed = 84735)\n\n# Confirm the prior tunings\nprior_summary(spotify_hierarchical)\n\nmcmc_trace(spotify_hierarchical)\nmcmc_dens_overlay(spotify_hierarchical)\nmcmc_acf(spotify_hierarchical)\nneff_ratio(spotify_hierarchical)\nrhat(spotify_hierarchical)\n\npp_check(spotify_hierarchical) + \n  xlab(\"popularity\")\n\n# Store the simulation in a data frame\nspotify_hierarchical_df <- as.data.frame(spotify_hierarchical)\n\n# Check out the first 3 and last 3 parameter labels\nspotify_hierarchical_df %>% \n  colnames() %>% \n  as.data.frame() %>% \n  slice(1:3, 45:47)\n\n```\n\n## 16.4.2 Posterior analysis of global parameters\n\n```{r}\n\ntidy(spotify_hierarchical, effects = \"fixed\", \n     conf.int = TRUE, conf.level = 0.80)\n\ntidy(spotify_hierarchical, effects = \"ran_pars\")\n\n15.1^2 / (15.1^2 + 14.0^2)\n\n14.0^2 / (15.1^2 + 14.0^2)\n\n```\n\n## 16.4.3 Posterior analysis of group-specific parameters\n\n```{r}\n\nartist_summary <- tidy(spotify_hierarchical, effects = \"ran_vals\", \n                       conf.int = TRUE, conf.level = 0.80)\n\n# Check out the results for the first & last 2 artists\nartist_summary %>% \n  select(level, conf.low, conf.high) %>% \n  slice(1:2, 43:44)\n\n# Get MCMC chains for each mu_j\nartist_chains <- spotify_hierarchical %>%\n  spread_draws(`(Intercept)`, b[,artist]) %>% \n  mutate(mu_j = `(Intercept)` + b) \n\n# Check it out\nartist_chains %>% \n  select(artist, `(Intercept)`, b, mu_j) %>% \n  head(4)\n\n# Get posterior summaries for mu_j\nartist_summary_scaled <- artist_chains %>% \n  select(-`(Intercept)`, -b) %>% \n  mean_qi(.width = 0.80) %>% \n  mutate(artist = fct_reorder(artist, mu_j))\n\n# Check out the results\nartist_summary_scaled %>% \n  select(artist, mu_j, .lower, .upper) %>% \n  head(4)\n\nggplot(artist_summary_scaled, \n       aes(x = artist, y = mu_j, ymin = .lower, ymax = .upper)) +\n  geom_pointrange() +\n  xaxis_text(angle = 90, hjust = 1)\n\nartist_means %>% \n  filter(artist %in% c(\"Frank Ocean\", \"Lil Skies\"))\n\n```\n\n# 16.5 Posterior prediction\n\n```{r}\n\n# Simulate Ocean's posterior predictive model\nset.seed(84735)\nocean_chains <- spotify_hierarchical_df %>%\n  rename(b = `b[(Intercept) artist:Frank_Ocean]`) %>% \n  select(`(Intercept)`, b, sigma) %>% \n  mutate(mu_ocean = `(Intercept)` + b,\n         y_ocean = rnorm(20000, mean = mu_ocean, sd = sigma))\n\n# Check it out\nhead(ocean_chains, 3)\n\n# Posterior summary of Y_new,j\nocean_chains %>% \n  mean_qi(y_ocean, .width = 0.80)    \n\n# Posterior summary of mu_j\nartist_summary_scaled %>% \n  filter(artist == \"artist:Frank_Ocean\")\n\nset.seed(84735)\nmohsen_chains <- spotify_hierarchical_df %>%\n  mutate(sigma_mu = sqrt(`Sigma[artist:(Intercept),(Intercept)]`),\n         mu_mohsen = rnorm(20000, `(Intercept)`, sigma_mu),\n         y_mohsen = rnorm(20000, mu_mohsen, sigma))\n\n# Posterior predictive summaries\nmohsen_chains %>% \n  mean_qi(y_mohsen, .width = 0.80)\n\nset.seed(84735)\nprediction_shortcut <- posterior_predict(\n  spotify_hierarchical,\n  newdata = data.frame(artist = c(\"Frank Ocean\", \"Mohsen Beats\")))\n\n# Posterior predictive model plots\nmcmc_areas(prediction_shortcut, prob = 0.8) +\n  ggplot2::scale_y_discrete(labels = c(\"Frank Ocean\", \"Mohsen Beats\"))\n\n```\n\n# 16.6 Shrinkage & the bias-variance trade-off\n\n```{r}\n\nset.seed(84735)\npredictions_hierarchical <- posterior_predict(spotify_hierarchical, \n                                              newdata = artist_means)\n\n# Posterior predictive plots\nppc_intervals(artist_means$popularity, yrep = predictions_hierarchical, \n              prob_outer = 0.80) +\n  ggplot2::scale_x_continuous(labels = artist_means$artist, \n                              breaks = 1:nrow(artist_means)) +\n  xaxis_text(angle = 90, hjust = 1) + \n  geom_hline(yintercept = 58.4, linetype = \"dashed\")\n\nartist_means %>% \n  filter(artist %in% c(\"Camila Cabello\", \"Lil Skies\"))\n\n```\n\n# 16.7 Not everything is hierarchical\n\n```{r}\n\ndata(bikes)\nbikes %>% \n  select(rides, weekend) %>% \n  head(3)\n\nbikes %>%\n  group_by(weekend) %>% \n  tally()\n\n\n\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"16_notes.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":"../custom.scss","title":"16: (Normal) Hierarchical Models without Predictors","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}