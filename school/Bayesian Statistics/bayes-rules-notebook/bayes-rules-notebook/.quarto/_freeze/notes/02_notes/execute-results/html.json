{
  "hash": "0992df5d1e7284e2d7b93ecb81caf327",
  "result": {
    "markdown": "---\ntitle: \"2: Bayes' Rule\"\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(bayesrules)\nlibrary(tidyverse)\nlibrary(janitor)\n```\n:::\n\n\n# 2.1 Building a Bayesian model for events\n\nHow many are fake vs. real?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_news %>% \n  count(type) %>% \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  type   n\n  fake  60\n  real  90\n Total 150\n```\n:::\n:::\n\n\n60/150 or 40% of news articles are fake.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfake_news %>% \n  tabyl(title_has_excl, type) %>% \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n title_has_excl fake real\n          FALSE   44   88\n           TRUE   16    2\n          Total   60   90\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define possible articles\narticle <- data.frame(type = c(\"real\", \"fake\"))\n\n# Define the prior model\nprior <- c(0.6, 0.4)\n\n# Simulate 3 articles\nsample_n(article, size = 3, weight = prior, replace = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  type\n1 real\n2 fake\n3 real\n```\n:::\n\n```{.r .cell-code}\nset.seed(84735)\narticle_sim <- sample_n(article, size = 10000, \n                        weight = prior, replace = TRUE)\n\nggplot(article_sim, aes(x = type)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02_notes_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\narticle_sim %>% \n  tabyl(type) %>% \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  type     n percent\n  fake  4031  0.4031\n  real  5969  0.5969\n Total 10000  1.0000\n```\n:::\n\n```{.r .cell-code}\narticle_sim <- article_sim %>% \n  mutate(data_model = case_when(type == \"fake\" ~ 0.2667,\n                                type == \"real\" ~ 0.0222))\n\nglimpse(article_sim)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 10,000\nColumns: 2\n$ type       <chr> \"fake\", \"fake\", \"real\", \"fake\", \"fake\", \"real\", \"real\", \"re…\n$ data_model <dbl> 0.2667, 0.2667, 0.0222, 0.2667, 0.2667, 0.0222, 0.0222, 0.0…\n```\n:::\n\n```{.r .cell-code}\n# Define whether there are exclamation points\ndata <- c(\"no\", \"yes\")\n\n# Simulate exclamation point usage \nset.seed(3)\narticle_sim <- article_sim %>%\n  group_by(1:n()) %>% \n  mutate(usage = sample(data, size = 1, \n                        prob = c(1 - data_model, data_model)))\n\narticle_sim %>% \n  tabyl(usage, type) %>% \n  adorn_totals(c(\"col\",\"row\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n usage fake real Total\n    no 2961 5833  8794\n   yes 1070  136  1206\n Total 4031 5969 10000\n```\n:::\n\n```{.r .cell-code}\nggplot(article_sim, aes(x = type, fill = usage)) + \n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](02_notes_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(article_sim, aes(x = usage)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02_notes_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n\n```{.r .cell-code}\narticle_sim %>% \n  filter(usage == \"yes\") %>% \n  tabyl(type) %>% \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  type    n   percent\n  fake 1070 0.8872305\n  real  136 0.1127695\n Total 1206 1.0000000\n```\n:::\n\n```{.r .cell-code}\nggplot(article_sim, aes(x = type)) + \n  geom_bar() + \n  facet_wrap(~ usage)\n```\n\n::: {.cell-output-display}\n![](02_notes_files/figure-html/unnamed-chunk-3-3.png){width=672}\n:::\n:::\n\n\n# 2.2 Example: Pop vs soda vs coke\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data\ndata(pop_vs_soda)\n\n# Summarize pop use by region\npop_vs_soda %>% \n  tabyl(pop, region) %>% \n  adorn_percentages(\"col\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   pop   midwest northeast      south      west\n FALSE 0.3552958 0.7266026 0.92077769 0.7057215\n  TRUE 0.6447042 0.2733974 0.07922231 0.2942785\n```\n:::\n:::\n\n\n# 2.3.7 Posterior simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define possible win probabilities\nchess <- data.frame(pi = c(0.2, 0.5, 0.8))\n\n# Define the prior model\nprior <- c(0.10, 0.25, 0.65)\n\n# Simulate 10000 values of pi from the prior\nset.seed(84735)\nchess_sim <- sample_n(chess, size = 10000, weight = prior, replace = TRUE)\n\n# Simulate 10000 match outcomes\nchess_sim <- chess_sim %>% \n  mutate(y = rbinom(10000, size = 6, prob = pi))\n\n# Check it out\nchess_sim %>% \n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   pi y\n1 0.5 3\n2 0.5 3\n3 0.8 4\n```\n:::\n\n```{.r .cell-code}\n# Summarize the prior\nchess_sim %>% \n  tabyl(pi) %>% \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    pi     n percent\n   0.2  1017  0.1017\n   0.5  2521  0.2521\n   0.8  6462  0.6462\n Total 10000  1.0000\n```\n:::\n\n```{.r .cell-code}\n# Plot y by pi\nggplot(chess_sim, aes(x = y)) + \n  stat_count(aes(y = ..prop..)) + \n  facet_wrap(~ pi)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The dot-dot notation (`..prop..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(prop)` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](02_notes_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Focus on simulations with y = 1\nwin_one <- chess_sim %>% \n  filter(y == 1)\n\n# Summarize the posterior approximation\nwin_one %>% \n  tabyl(pi) %>% \n  adorn_totals(\"row\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    pi   n    percent\n   0.2 404 0.60388640\n   0.5 253 0.37817638\n   0.8  12 0.01793722\n Total 669 1.00000000\n```\n:::\n\n```{.r .cell-code}\n# Plot the posterior approximation\nggplot(win_one, aes(x = pi)) + \n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02_notes_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "02_notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}