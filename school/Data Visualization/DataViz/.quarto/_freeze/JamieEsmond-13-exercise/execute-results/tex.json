{
  "hash": "c41526f8035b971cfb3c35dabb0bb15d",
  "result": {
    "markdown": "---\ntitle: \"Exercise 13\"\nauthor: \"Jamie Pantazi Esmond\"\ndate: \"today\"\ndate-format: \"long\"\nformat: \n  html: \n    toc: true\n    theme: custom.scss\n    fig-cap-location: \"top\"\n    tbl-cap-location: \"top\"\n    title-block-banner: true\n    title-block-banner-color: \"#744FC6\"\n    fig-align: \"center\"\n  pdf: \n    toc: true\n    lof: true\n    mainfont: \"Cambria\"\n    fig-cap-location: \"top\"\n    code-line-numbers: true\n    fig-align: \"center\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\\newpage\n\n# Task 1: Reflection\n\nWord clouds are generally unuseful for all the reasons we discussed, but I think a big problem with them is also that there is so much variation in words that mean the same thing. However, a potential situation where they might be more useful is for #hashtags. Hashtags are more uniform, and there is usually only one of each hashtag per post; mapping hashtag trends over time by platform *could* be conducive to a word cloud, maybe faceted by year or month. This might do a decent job of showing the popularity of different hashtags throughout a season, campaign, or term in office. (Still probably not the best choice, but if the point is specifically an analysis of social media, it could work.)\n\n\\newpage\n\n# Task 2: Word frequencies\n\nDownload 4+ books by some author on [Project Gutenberg](http://www.gutenberg.org/). Jane Austen, Victor Hugo, Emily BrontÃ«, Lucy Maud Montgomery, Arthur Conan Doyle, Mark Twain, Henry David Thoreau, Fyodor Dostoyevsky, Leo Tolstoy. Anyone. Just make sure it's all from the same author.\n\nMake these two plots and describe what each tell about your author's books:\n\n1.  Top 10 most frequent words *in each book*\n2.  Top 10 most unique words *in each book* (i.e. tf-idf)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidytext)\nlibrary(gutenbergr)\nlibrary(stringr)\n\ncolors <- c(\"#CC0AA4\", \"#0ACCC5\", \"#3ACC14\", \"#7400CC\", \"#CCAC14\")\n```\n:::\n\n\n\n\\newpage\n\n## Oscar Wilde\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwilde_raw <- gutenberg_download(c(174, 844, 902, 854, 885),\n                                meta_fields = \"title\",\n                                mirror = \"http://mirrors.xmission.com/gutenberg/\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspeaker <- \"^[A-Z][A-Z ]+.\"\ndirection <- \"\\\\s*\\\\[.*?\\\\]\\\\s*\"\n\nwilde <- wilde_raw %>% \n  slice(82:n()) %>% \n  drop_na(text) %>% \n  mutate(text = ifelse(str_detect(text, \"^CHAPTER\"), text,\n                       str_replace(text, speaker, \"\"))) %>% \n  mutate(text = str_replace(text, direction, \"\")) %>% \n  select(-gutenberg_id) \n\nwilde_toptext <- wilde %>% \n  mutate(text = str_replace(text, speaker, \"\")) %>% \n  drop_na(text) %>% \n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) %>% \n  count(title, word, sort = TRUE) %>% \n  group_by(title) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(word = fct_inorder(word)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(word)`\nSelecting by n\n```\n:::\n\n```{.r .cell-code}\nwilde_topbi <- wilde %>% \n  drop_na(text) %>% \n  mutate(text = str_replace(text, speaker, \"\")) %>% \n  unnest_tokens(bigram, text, token = \"ngrams\", n = 2) %>% \n  drop_na(bigram) %>% \n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \") %>% \n  filter(!word1 %in% stop_words$word,\n         !word2 %in% stop_words$word) %>% \n  unite(bigram, word1, word2, sep = \" \") %>% \n  count(title, bigram, sort = TRUE) %>%\n  group_by(title) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(bigram = fct_inorder(bigram))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by n\n```\n:::\n\n```{.r .cell-code}\nwilde_uniq <- wilde %>% \n  drop_na() %>% \n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) %>% \n  count(title, word, sort = TRUE) %>% \n  bind_tf_idf(word, title, n) %>% \n  arrange(desc(tf_idf)) %>% \n  group_by(title) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(word = fct_inorder(word))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(word)`\nSelecting by tf_idf\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwilde_toptext %>% \n  ggplot() +\n  geom_col(aes(n, fct_rev(word), fill = title)) +\n  facet_wrap(~fct_rev(title), ncol = 2, \n             scales = \"free_y\",\n             labeller = label_wrap_gen(width = 35)) +\n  scale_fill_manual(values = colors, guide = \"none\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Oscar Wilde's Favorite Words\") +\n  theme_light() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"#2B004D\", face = \"bold\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_text(family = \"serif\"),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![Oscar Wilde's Favorite Words](JamieEsmond-13-exercise_files/figure-pdf/plot1-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwilde_topbi %>% \n  ggplot() +\n  geom_col(aes(n, fct_rev(bigram), fill = title)) +\n  facet_wrap(~fct_rev(title), ncol = 2, \n             scales = \"free_y\",\n             labeller = label_wrap_gen(width = 35)) +\n  scale_fill_manual(values = colors, guide = \"none\") +\n  labs(x = NULL,\n       y = NULL,\n       title = \"Oscar Wilde's Most Common Bigrams\") +\n  theme_light() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"#2B004D\", face = \"bold\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_text(family = \"serif\"),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![Oscar Wilde's Most Common Bigrams](JamieEsmond-13-exercise_files/figure-pdf/plot2-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwilde_uniq %>% \n  ggplot() +\n  geom_col(aes(tf_idf, fct_rev(word), fill = title)) +\n  facet_wrap(~fct_rev(title), ncol = 2, \n             scales = \"free_y\",\n             labeller = label_wrap_gen(width = 35)) +\n  scale_fill_manual(values = colors, guide = \"none\") +\n  labs(x = \"tf-idf\",\n       y = NULL,\n       title = \"Uniquest Oscar Wilde Words\") +\n  theme_light() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"#2B004D\", face = \"bold\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text = element_text(family = \"serif\"),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![Uniquest Oscar Wilde Words](JamieEsmond-13-exercise_files/figure-pdf/plot3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\\newpage\n\n## Andor\n\nJust for fun because I had all the episode scripts already downloaded:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nandor_raw <- read_lines(\"data/andor.txt\")\n\nandor_raw <- tibble(text = read_lines(\"data/andor.txt\")) %>% \n  filter(text != \"\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnonverbal <- \"\\\\s*\\\\(.*?\\\\)\\\\s*\"\nspeaker2 <- \".*?:\\\\s*\"\n\nandor <- andor_raw %>% \n  mutate(text = str_replace_all(text, nonverbal, \" \")) %>% \n  mutate(text = str_replace_all(text, speaker2, \"\")) %>% \n  filter(text != \" \") %>% \n  mutate(ep_start = str_detect(text, \"^Episode\"),\n         ep_num = cumsum(ep_start)) %>% \n  mutate(arc = case_when(ep_num <= 3 ~ \"Arc 1 - Intro\",\n                         ep_num %in% c(4,5,6) ~ \"Arc 2 - Aldhani Heist\",\n                         ep_num %in% c(7,8,9) ~ \"Arc 3 - Prison Break\",\n                         TRUE ~ \"Arc 4 - Finale\")) %>% \n  select(-ep_start)\n\nandor_toptext <- andor %>% \n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) %>% \n  filter(!(word %in% c(\"im\", \"dont\", \"hes\", \"ill\", \"id\", \"weve\", \"whats\",\n                       \"ive\", \"theyre\", \"youve\", \"shes\", \"youll\", \"youre\"))) %>% \n  count(arc, word, sort = TRUE) %>% \n  group_by(arc) %>% \n  top_n(15) %>% \n  ungroup() %>% \n  mutate(word = fct_inorder(word)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(word)`\nSelecting by n\n```\n:::\n\n```{.r .cell-code}\nandor_bi <- andor %>% \n  drop_na(text) %>% \n  unnest_tokens(bigram, text, token = \"ngrams\", n = 2) %>% \n  drop_na(bigram) %>% \n  separate(bigram, c(\"word1\", \"word2\"), sep = \" \") %>% \n  filter(!word1 %in% stop_words$word,\n         !word2 %in% stop_words$word) %>% \n  unite(bigram, word1, word2, sep = \" \") %>% \n  filter(!(bigram == \"5 2\")) %>% \n  count(arc, bigram, sort = TRUE) %>%\n  group_by(arc) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(bigram = fct_inorder(bigram))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSelecting by n\n```\n:::\n\n```{.r .cell-code}\nandor_uniq <- andor %>% \n  drop_na() %>% \n  unnest_tokens(word, text) %>% \n  anti_join(stop_words) %>% \n  count(arc, word, sort = TRUE) %>% \n  bind_tf_idf(word, arc, n) %>% \n  arrange(desc(tf_idf)) %>% \n  group_by(arc) %>% \n  top_n(10) %>% \n  ungroup() %>% \n  mutate(word = fct_inorder(word))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(word)`\nSelecting by tf_idf\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplaces <- c(\"ferrix\", \"aldhani\", \"kenari\", \"alkenzi\", \"alderaan\")\nppl <- c(\"cassian\", \"bix\", \"andor\", \"bee\", \"clem\", \"kreegyr\", \"paak\",\n         \"kassa\", \"keef\", \"ulaf\", \"caleen\", \"girgo\", \"lonni\", \"haye\",\n         \"anto\")\n\nandor_toptext %>%\n  mutate(color =  case_when(grepl(\"\\\\bimperial\\\\b\", word, \n                                  ignore.case = TRUE) ~ \"Imperial Words\",\n                            grepl(\"\\\\bempire\\\\b\", word, \n                                  ignore.case = TRUE) ~ \"Imperial Words\",\n                            word %in% places ~ \"Place Names\",\n                            word %in% ppl ~ \"Character Names\",\n                            TRUE ~ \"Other\")) %>%\n  ggplot() +\n  geom_col(aes(n, fct_rev(word), fill = color)) +\n  facet_wrap(~ arc, scales = \"free_y\", ncol = 2) +\n  scale_x_continuous(breaks = seq(0,60, 15)) +\n  scale_fill_manual(values = colors, limits = c(\"Place Names\",\n                                                \"Character Names\",\n                                                \"Imperial Words\",\n                                                \"Other\")) +\n  labs(x = NULL,\n       y = NULL,\n       fill = NULL,\n       title = \"Top Andor Words\") +\n  theme_light() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"#2B004D\", face = \"bold\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"bottom\",\n        axis.text = element_text(family = \"serif\", size = 10),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![Top Andor Words](JamieEsmond-13-exercise_files/figure-pdf/plot4-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggsave(\"andor.png\", width = 7.5, height = 9)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplaces1 <- c(\"rix road\", \"pre mor\", \"preox morlana\")\nppl1 <- c(\"cassian andor\", \"uncle harlo\", \"dedra meero\", \n          \"anto kreegyr\", \"lieutenant gorn\", \"keef girgo\", \n          \"mon mothma\", \"tay kolma\", \"supervisor meero\",\n          \"dr gorst\", \"bix bix\", \"salman paak\")\n\nandor_bi %>%\n  mutate(color =  case_when(grepl(\"\\\\bimperial\\\\b\", bigram, \n                                  ignore.case = TRUE) ~ \"Imperial Words\",\n                            grepl(\"\\\\bempire\\\\b\", bigram, \n                                  ignore.case = TRUE) ~ \"Imperial Words\",\n                            bigram %in% places1 ~ \"Place Names\",\n                            bigram %in% ppl1 ~ \"Character Names\",\n                            TRUE ~ \"Other\")) %>% \n  ggplot() +\n  geom_col(aes(n, fct_rev(bigram), fill = color)) +\n  facet_wrap(~ arc, scales = \"free_y\", ncol = 2) +\n  scale_x_continuous(breaks = seq(0,15,3)) +\n  scale_fill_manual(values = colors, limits = c(\"Place Names\",\n                                                \"Character Names\",\n                                                \"Imperial Words\",\n                                                \"Other\")) +\n  labs(x = NULL,\n       y = NULL,\n       fill = NULL,\n       title = \"Top Andor Phrases\") +\n  theme_light() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"#2B004D\", face = \"bold\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = \"bottom\",\n        axis.text = element_text(family = \"serif\", size = 10),\n        axis.ticks = element_blank())\n```\n\n::: {.cell-output-display}\n![Top Andor Phrases](JamieEsmond-13-exercise_files/figure-pdf/plot5-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggsave(\"andor1.png\", width = 7.5, height = 8)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nandor_uniq %>% \n  mutate(color =  case_when(grepl(\"\\\\bimperial\\\\b\", word, \n                                  ignore.case = TRUE) ~ \"Imperial\",\n                            grepl(\"\\\\bempire\\\\b\", word, \n                                  ignore.case = TRUE) ~ \"Imperial\",\n                            word %in% places ~ \"Place Names\",\n                            word %in% ppl ~ \"Character Names\",\n                            TRUE ~ \"Other\")) %>%\n  ggplot() +\n  geom_col(aes(tf_idf, fct_rev(word), fill = color)) +\n  facet_wrap(~ arc, ncol = 2, \n             scales = \"free_y\",\n             labeller = label_wrap_gen(width = 35)) +\n  scale_fill_manual(values = colors, limits = c(\"Place Names\",\n                                                \"Character Names\",\n                                                \"Imperial\",\n                                                \"Other\")) +\n  labs(x = NULL,\n       y = NULL,\n       fill = NULL,\n       title = \"Uniquest Andor Words\") +\n  theme_light() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(color = \"#2B004D\", face = \"bold\"),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_text(family = \"serif\"),\n        axis.ticks = element_blank(),\n        legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![Uniquest Andor Words](JamieEsmond-13-exercise_files/figure-pdf/plot6-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggsave(\"andor2.png\", width = 7.5, height = 8)\n```\n:::\n",
    "supporting": [
      "JamieEsmond-13-exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}