{
  "hash": "653c5880a0f7d401edbf9d5d9e4418f6",
  "result": {
    "markdown": "---\ntitle: \"Exercise 7\"\nauthor: \"Jamie Pantazi Esmond\"\ndate: \"today\"\ndate-format: \"long\"\nformat: \n  html: \n    toc: true\n    theme: custom.scss\n    fig-cap-location: \"top\"\n    tbl-cap-location: \"top\"\n    title-block-banner: true\n    title-block-banner-color: \"#744FC6\"\n    fig-align: \"center\"\n  pdf: \n    toc: true\n    lof: true\n    mainfont: \"Cambria\"\n    fig-cap-location: \"top\"\n    code-line-numbers: true\n    fig-align: \"center\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\\newpage\n\n# Task 1: Reflection\n\nWhile regression is a good way to determine correlations and their significance, it is not a method that is familiar to everyone, so visualizing the relationship with less math is important. The uncertainty of regression coefficients is probably the hardest to explain that using point ranges on a plot can visualize the range of possible correlation between two variables. It is clear if the range crosses zero, that the correlation may not exist, but if the range is far from in zero line the more evidence for the truth of the correlation.\n\n\\newpage\n\n# Task 2: Combining plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(ggridges)   # For ridge plots\nlibrary(gghalves)   # For half geoms\nlibrary(scales)\nlibrary(marginaleffects)\n\n\ncolors <- c(\"#7400CC\", \"#3ACC14\", \"#CC0AA4\", \"#CCAC14\", \"#0E0ACC\")\n\nresults_2016 <- read_csv(\"data/results_2016.csv\")\n```\n:::\n\n\n\nMake 2--3 plots of anything you want from the `results_2016` data (histogram, density, boxplot, scatterplot, whatever) and combine them with {patchwork}. Look at [the documentation](https://patchwork.data-imaginist.com/articles/guides/assembly.html) to see fancy ways of combining them, like having two rows inside a column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make some plots and combine them here\n\nresults <- results_2016 %>% \n  mutate(black = ifelse(percent_black >= 50, \"Majority Black\", \"Not Majority Black\"),\n         white = ifelse(percent_white >= 50, \"Majority White\", \"Not Majority White\"))\n\nb_pop <- results %>% \n  drop_na(black) %>% \n  ggplot(aes(percent_dem, per_capita_income, color = black, fill = black)) +\n  geom_point(aes(size = total_population), shape = 21, color = \"black\") +\n  geom_smooth() +\n  scale_size(labels = comma) +\n  scale_fill_manual(values = colors) +\n  scale_color_manual(values = colors) +\n  scale_x_continuous(labels = label_percent(scale = 1)) +\n  scale_y_continuous(labels = label_dollar(accuracy = 1)) +\n  labs(x = \"% Democrat\",\n       y = \"Per Capita Income\",\n       fill = NULL,\n       color = NULL,\n       size = \"Total Population\",\n       title = \"Voting Patterns and Income\") +\n  theme_light() +\n  theme(panel.grid.major.x = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(family = \"serif\"),\n        axis.text.y = element_text(family = \"serif\"),\n        legend.position = \"right\")\n\nresults_long <- results %>% \n  pivot_longer(c(percent_white, percent_black, percent_hispanic)) %>% \n  mutate(race = case_when(name == \"percent_black\" ~ \"Black\",\n                          name == \"percent_white\" ~ \"White\",\n                          name == \"percent_hispanic\" ~ \"Hispanic\"))\n\nrace <- results_long %>% \n  ggplot() +\n  geom_density(aes(value, color = race, fill = race), \n               size = 1, alpha = .5) +\n  scale_x_continuous(labels = label_percent(scale = 1)) +\n  labs(x = \"Percent of Population\",\n       y = \"Density\",\n       Fill = \"Race\",\n       title = \"Distribution of Racial Percent of Population\") +\n  theme_light() +\n  theme(panel.grid.major.x = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.major.y = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(family = \"serif\"),\n        axis.text.y = element_text(family = \"serif\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\ni Please use `linewidth` instead.\n```\n:::\n\n```{.r .cell-code}\nb_pop + race +\n  plot_layout(ncol = 1, heights = c(0.55, 0.45))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing non-finite values (`stat_smooth()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 135 rows containing non-finite values (`stat_density()`).\n```\n:::\n\n::: {.cell-output-display}\n![Voting Patterns, Race, and Income](JamieEsmond-07-exercise_files/figure-pdf/combine-plots-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresults %>% \n  filter(state == \"Georgia\" | \n           state == \"Florida\" | \n           state == \"Alabama\" | \n           state == \"South Carolina\" | \n           state == \"Tennessee\") %>% \n  ggplot(aes(state, median_rent, color = state, fill = state)) +\n  geom_half_point(side = \"l\", size = .4, alpha = .75) + \n  geom_half_boxplot(side = \"l\", width = .6, \n                    alpha = 0.3, nudge = 0.1) +\n  geom_half_violin(side = \"r\", alpha = .75) +\n  scale_fill_manual(values = colors, guide = \"none\") +\n  scale_color_manual(values = colors, guide = \"none\") +\n  scale_y_continuous(labels = label_dollar(accuracy = 1)) +\n  scale_x_discrete(limits = rev) +\n  labs(x = NULL,\n       y = \"Median Rent\",\n       fill = NULL,\n       color = NULL,\n       title = \"Distribution of Median Rent\",\n       subtitle = \"in Georgia and Surrounding States\") +\n  coord_flip() +\n  theme_light() +\n  theme(panel.grid.major.x = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(family = \"serif\"),\n        axis.text.y = element_text(family = \"serif\"))\n```\n\n::: {.cell-output-display}\n![Distribution of Median Rent (for fun)](JamieEsmond-07-exercise_files/figure-pdf/plot2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\\newpage\n\n# Task 3: Visualizing regression\n\n## Coefficient plot\n\nUse the `results_2016` data to create a model that predicts the percent of Democratic votes in a precinct based on age, race, income, rent, and state (hint: the formula will look like this: `percent_dem ~ median_age + percent_white + per_capita_income + median_rent + state`)\n\nUse `tidy()` in the {broom} package and `geom_pointrange()` to create a coefficient plot for the model estimates. You'll have 50 rows for all the states, and that's excessive for a plot like this, so you'll want to filter out the state rows. You can do that by adding this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(...) %>%\n  filter(!str_detect(term, \"state\"))\n```\n:::\n\n\n\nThe `str_detect()` function looks for the characters \"state\" in the term column. The `!` negates it. This is thus saying \"only keep rows where the word 'state' is not in the term name\".\n\nYou should also get rid of the intercept (`filter(term != \"(Intercept)\")`).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndems <- lm(percent_dem ~ median_age + percent_white + per_capita_income + median_rent + state,\n           data = results)\n\ndems1 <- tidy(dems, conf.int = TRUE) %>% \n  filter(!str_detect(term, \"state\"),\n         term != \"(Intercept)\") %>% \n  mutate(name = case_when(term == \"median_age\" ~ \"Median Age\",\n                          term == \"percent_white\" ~ \"Percent White\",\n                          term == \"per_capita_income\" ~ \"Per Capita Income\",\n                          term == \"median_rent\" ~ \"Median Rent\"))\n\ndems1 %>% \n  ggplot(aes(x = estimate, y = name)) +\n  geom_vline(xintercept = 0, color = \"#CC0AA4\", linetype = \"dotted\") +\n  geom_pointrange(aes(xmin = conf.low, xmax = conf.high), color = \"#7400CC\") + \n  labs(x = \"Coefficient estimate\", \n       y = NULL,\n       title = \"Coefficient Estimates for Several Variables\") +\n  theme_light() +\n  theme(panel.grid.major.x = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.major.y = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(family = \"serif\"),\n        axis.text.y = element_text(family = \"serif\"))\n```\n\n::: {.cell-output-display}\n![Coefficient Estimates for Several Variables](JamieEsmond-07-exercise_files/figure-pdf/coefplot-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Predicted values\n\nShow what happens to `percent_dem` as one (or more) of your model's variables changes. To make life easy, refer to the [\"Predicted values and marginal effects in 2023\"](https://datavizs23.classes.andrewheiss.com/example/07-example.html#predicted-values-and-marginal-effects-in-2023) section in this session's example and use `predictions()` rather than creating your own `newdata` data set by hand. You'll do something like this (assuming you're manipulating `per_capita_income`; try using a different variable when you do the assignment, though):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_predictions <- predictions(\n  model_name,\n  newdata = datagrid(per_capita_income = seq(9000, 60000, by = 100),\n                     state = \"Georgia\"))\n```\n:::\n\n\n\nPlot your varied variable on the x-axis, the fitted values (`predicted`) on the y-axis, show the relationship with a line, and add a ribbon to show the 95% confidence interval.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprecog <- predictions(\n  dems,\n  newdata = datagrid(median_rent = seq(200, 2000, by = 10))\n)\n\nggplot(precog, aes(x = median_rent, y = estimate)) +\n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high),\n              fill = \"#CC0AA4\", alpha = 0.5) + \n  geom_line(size = 1, color = \"#CC0AA4\") +\n  scale_y_continuous(labels = label_percent(scale = 1)) +\n  scale_x_continuous(labels = label_dollar(accuracy = 1)) +\n  labs(x = \"Median Rent\", \n       y = \"Predicted Democrat Votes (percent)\",\n       title = \"Democratic Predictions\",\n       subtitle = \"Considering Median Rent Costs\") +\n  theme_light() +\n  theme(panel.grid.major.x = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.major.y = element_line(color = \"#FDDEED\", linetype = \"longdash\"),\n        panel.grid.minor = element_blank(),\n        panel.border = element_blank(),\n        axis.ticks = element_blank(),\n        axis.text.x = element_text(family = \"serif\"),\n        axis.text.y = element_text(family = \"serif\"))\n```\n\n::: {.cell-output-display}\n![Democratic Predictions](JamieEsmond-07-exercise_files/figure-pdf/precog-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\\newpage\n\n**(I want to come back to these...)**\n\n# Bonus task 1! Correlograms\n\n**This is entirely optional but might be fun.**\n\nFor extra fun times, if you feel like it, create a correlogram heatmap, either with `geom_tile()` or with points sized by the correlation. Use any variables you want from `results_2016`.\n\n# Bonus task 2! Marginal effects\n\n**This is also entirely optional but will be super useful if you use regression for anything in your own work.**\n\nFor extra super bonus fun times, create a more complex model that predicts `percent_dem` that uses polynomial terms (e.g. age squared) and/or interaction terms (e.g. age × state). Plot predictions from the model, use `marginaleffects()` to find the slopes of those predictions at different values, and plot the slopes in a marginal effects plot. (The [\"Predicted values and marginal effects in 2023\"](https://datavizs23.classes.andrewheiss.com/example/07-example.html#predicted-values-and-marginal-effects-in-2023) section from the example will be indispensable here.)\n",
    "supporting": [
      "JamieEsmond-07-exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}