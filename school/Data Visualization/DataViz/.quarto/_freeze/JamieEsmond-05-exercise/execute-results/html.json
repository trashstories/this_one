{
  "hash": "6d6c0418be50d6000fd2483a9757758f",
  "result": {
    "markdown": "---\ntitle: \"Exercise 5\"\nauthor: \"Jamie Pantazi Esmond\"\ndate: \"today\"\ndate-format: \"long\"\nformat: \n  html: \n    toc: true\n    theme: custom.scss\n    fig-cap-location: \"top\"\n    tbl-cap-location: \"top\"\n    title-block-banner: true\n    title-block-banner-color: \"#744FC6\"\n    fig-align: \"center\"\n  pdf: \n    toc: true\n    mainfont: \"Cambria\"\n    fig-cap-location: \"top\"\n    code-line-numbers: true\n    fig-align: \"center\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Task 1: Reflection\n\nHow do the principles of CRAP apply to graph design and other theme elements?\n\n# Task 2: Ugly plot\n\nDuncan Greere has collected a database of 48 Soviet dogs who flew as test subjects in USSR's space program in the 1950s and 60s. [The original data can be found here](https://airtable.com/universe/expG3z2CFykG1dZsp/sovet-space-dogs).\n\n## Load and clean data\n\nFirst we load and clean the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# You'll only need the tidyverse library for this exercise\nlibrary(tidyverse)\n\nspace_dogs_raw <- read_csv(\"data/Dogs-Database.csv\")\n\nspace_dogs <- space_dogs_raw %>% \n  # The Fate column seems to either say \"Survived\" or \"Died <DATE>\", so we make\n  # a new binary version of the Fate column that is \"Survived\" if the dog\n  # survived and \"Died\" otherwise\n  mutate(Fate_binary = ifelse(Fate == \"Survived\", \"Survived\", \"Died\")) %>% \n  # The data lists the dates of each flight, separated by a comma. To convert\n  # that to a number, we do a little trick: count the number of commas in the\n  # cell and add 1 (if there were 2 flights, there would be 1 comma, etc.)\n  mutate(Flights_num = str_count(Flights, \",\") + 1)\n```\n:::\n\n\nThere are actually some interesting trends here! Female dogs were far less likely to die and went on way more flights than their male counterparts, but that's in part because the USSR used almost only male dogs from 1951-1954, so those dogs faced the early prototypes of rockets and capsules.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize the data by fate and gender\nspace_dogs_summarized <- space_dogs %>% \n  group_by(Fate_binary, Gender) %>% \n  summarize(total_dogs = n(),\n            total_flights = sum(Flights_num))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Fate_binary'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nspace_dogs_summarized\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 Ã— 4\n# Groups:   Fate_binary [2]\n  Fate_binary Gender total_dogs total_flights\n  <chr>       <chr>       <int>         <dbl>\n1 Died        Female         14            18\n2 Died        Male            6            10\n3 Survived    Female         19            43\n4 Survived    Male            9            10\n```\n:::\n:::\n\n\n## Ugly plot\n\nBut the trends don't matter here. What matters is hideous plots. Change the colors, modify the theme, add labels, etc. and make this ugly. You can leave the `geom_pointrange()` as is, or you can mess with it too (or even change it to a bar chart or pie chart or heatmap or something if you feel up to it).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ugly_plot <- ggplot(data = space_dogs_summarized, \n#                     mapping = aes(x = Fate_binary, y = total_flights, color = Gender)) +\n#   geom_pointrange(aes(ymin = 0, ymax = total_flights), size = 2, \n#                   position = position_dodge(width = 0.5))\n# \n# ugly_plot\n\nspace_dogs_summarized %>% \n  ggplot(aes(Fate_binary, total_flights, \n             fill = Gender, shape = Gender, size = total_dogs)) +\n  geom_pointrange(aes(ymin = 0, ymax = total_flights),\n                  position = position_dodge(width = 1), \n                  color = \"#99CCCB\", linewidth = 2) +\n  geom_label(aes(label = total_flights, \n                 family = \"mono\",\n                 size = total_dogs),\n             label.size = 1.5,\n             label.r = unit(0.75, \"lines\"),\n             label.padding = unit(0.5, \"lines\")) +\n  scale_fill_manual(values = c(\"#FF19D0\", \"#FFD719\")) +\n  scale_shape_manual(values = c(24,22)) +\n  labs(x = \"Fate\",\n       y = \"Flights\",\n       fill = \"Gender\",\n       shape = \"Gender\",\n       size = \"Number of Dogs\",\n       title = \"DOGS IN SPACE\",\n       subtitle = \"Female dogs survive longer in space!!!\",\n       caption = \"This cacophony of colors, sizes, shapes, and fonts does not do a good job of conveying truth.\") +\n  theme_dark() +\n    theme(text = element_text(family = \"serif\"),\n          title = element_text(size = 20, \n                               family = \"sans\", \n                               face = \"bold\", \n                               color = \"#B35D2D\"),\n          axis.title.x = element_text(size = 16, \n                                      family = \"sans\", \n                                      color = \"#36B368\"),\n          axis.title.y = element_text(size = 12, \n                                      family = \"serif\", \n                                      color = \"#B33697\"),\n          axis.text.x = element_text(size = 20,\n                                     family = \"serif\",\n                                     face = \"bold\",\n                                     color = \"#3EB3AF\"),\n          axis.text.y = element_text(size = 20,\n                                     family = \"mono\",\n                                     face = \"bold\",\n                                     color = \"#B3251B\",\n                                     angle = 30),\n          panel.grid.major.x = element_line(color = \"#662959\", \n                                            linetype = \"dotted\", \n                                            linewidth = 2),\n          panel.grid.major.y = element_line(color = \"#662959\", \n                                            linewidth = 2.5),\n          panel.grid.minor.y = element_line(color = \"#99352E\", \n                                            linetype = \"dashed\", \n                                            linewidth = 1),\n          legend.position = \"left\",\n          legend.title = element_text(size = 10,\n                                      family = \"mono\",\n                                      face = \"bold\",\n                                      color = \"#61734B\"), \n          legend.text = element_text(size = 16,\n                                     family = \"sans\",\n                                     face = \"bold\",\n                                     color = \"#61734B\"),\n          legend.background = element_rect(fill = \"#50B379\"),\n          legend.margin = margin(t = 30, b = 30),\n          aspect.ratio = 1,\n          plot.title = element_text(hjust = 1.5),\n          plot.subtitle\t= element_text(hjust = .75,\n                                       color = \"#3EB3AF\",\n                                       size = 12),\n          plot.caption\t= element_text(hjust = 1,\n                                       color = \"#99267E\",\n                                       size = 7,\n                                       face = \"italic\"))\n```\n\n::: {.cell-output-display}\n![](JamieEsmond-05-exercise_files/figure-html/ugly-plot-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save the plot as a PNG with ggsave()\n\nggsave(\"ugly.png\", last_plot())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nSaving 7 x 5 in image\n```\n:::\n:::\n",
    "supporting": [
      "JamieEsmond-05-exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}