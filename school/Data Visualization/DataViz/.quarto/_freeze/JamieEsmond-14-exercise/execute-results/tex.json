{
  "hash": "3712fb9b562c5c218bf3b1b5c45fc68f",
  "result": {
    "markdown": "---\ntitle: \"Exercise 14\"\nauthor: \"Jamie Pantazi Esmond\"\ndate: \"today\"\ndate-format: \"long\"\nformat: \n  pdf: \n    toc: true\n    mainfont: \"Cambria\"\n    fig-cap-location: \"top\"\n    code-line-numbers: true\n    fig-align: \"center\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Task 1: Reflection\n\nI am really not a fan of Adobe Illustrator. While it does seem to be very powerful, it is not intuitive and sometimes seems to have a mind of its own. When I first opened the graphics, it made some sense regarding the layers and groups, but the selections were visibly selected, so I knew what I was working with. But at some point, it started selecting in white, so I could barely tell what was selected at any given point. Later on, I imported a new version with modifications, and then it started placing each letter as its own layer. So to move one label, I have to select each individual letter (and since the selection is white, either I cannot tell what is selected on the image itself, or if the letter is small, the white selection obscures the element itself). I am not sure if this is design thing or a bug (or I changed settings by accident-which did happen a few times and I am not sure why), but I prefer to do as much with code as possible because I know how to communicate with code. (Also, R stuff is so much better to google for help.)\n\n# Task 2: Enhanced plot\n\nWhen you knit this document, you will create and save a basic bar chart of hot dog eating contest winners. You will then open the resulting file in Illustrator or Gravit Designer. Open the PDF in Illustrator; open the SVG in Gravit Designer.\n\nBe sure that you save your file in Illustrator or Gravit Designer **with a different name**. You don't want to accidentally overwrite all your enhancements and updates when you knit this document. That would be so sad.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.2     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(svglite)\n\nhotdogs <- read_csv(\"data/hot-dog-contest-winners.csv\") %>%\n  rename(dogs = `Dogs eaten`, record = `New record`) %>%\n  mutate(record = factor(record))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 31 Columns: 5\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (2): Winner, Country\ndbl (3): Year, Dogs eaten, New record\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# Change the colors here if you want\n# (or anything else if you want too)\nplot_hotdogs <- ggplot(hotdogs, \n                       aes(x = Year, y = dogs, fill = record)) + \n  geom_col() + \n  scale_fill_manual(values = c(\"#E0CFFF\", \"#7400CC\")) +\n  scale_x_continuous(breaks = seq(1980, 2010, 2), \n                     expand = c(0, 0)) +\n  scale_y_continuous(breaks = seq(0, 70, 10), \n                     expand = c(0, 0)) +\n  guides(fill = \"none\") +\n  labs(y = \"Hot dogs and buns\", x = NULL) +\n  theme_minimal() +\n  theme(panel.background = element_rect(fill = \"transparent\", colour = NA),\n        plot.background = element_rect(fill = \"transparent\", colour = NA),\n        axis.ticks.x = element_line(size = 0.25),\n        axis.text = element_text(family = \"serif\"),\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y = element_line(size = 0.5, linetype = \"longdash\"),\n        panel.grid.minor = element_blank())\n\nplot_hotdogs\n```\n\n::: {.cell-output-display}\n![](JamieEsmond-14-exercise_files/figure-pdf/make-and-save-hot-dog-plot-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Change the dimensions here if you want\nggsave(plot_hotdogs, filename = \"hotdogs.pdf\", device = cairo_pdf,\n       width = 7, height = 4, units = \"in\", bg = \"transparent\")\n\nggsave(plot_hotdogs, filename = \"hotdogs.svg\",\n       width = 7, height = 4, units = \"in\", bg = \"transparent\")\n```\n:::\n",
    "supporting": [
      "JamieEsmond-14-exercise_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}