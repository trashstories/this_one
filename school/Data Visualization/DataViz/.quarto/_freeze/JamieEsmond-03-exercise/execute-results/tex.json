{
  "hash": "2e1c5306fff42be023fbefbf30832345",
  "result": {
    "markdown": "---\ntitle: \"Exercise 3\"\nauthor: \"Jamie Pantazi Esmond\"\ndate: \"today\"\ndate-format: \"long\"\nformat: \n  html: \n    toc: true\n    theme: custom.scss\n    fig-cap-location: \"top\"\n    tbl-cap-location: \"top\"\n    title-block-banner: true\n    title-block-banner-color: \"#744FC6\"\n    fig-align: \"center\"\n  pdf: \n    toc: true\n    mainfont: \"Cambria\"\n    fig-cap-location: \"top\"\n    code-line-numbers: true\n    fig-align: \"center\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\\newpage\n\n# Task 1: Reflection\n\nWhy is it important to visualize variables and data?\n\nWhat does it mean to map data to graph aesthetics?\n\nWhat data was mapped to which aesthetics in Roslingâ€™s video?\n\n\n\n\\newpage\n\n# Task 2: Lord of the Rings\n\n## Load and clean data\n\nFirst we load, restructure, and clean the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(message = FALSE, warning = FALSE)\n\n# You'll only need the tidyverse library for this exercise\nlibrary(tidyverse)\nlibrary(scales)\n\ncolors <- c(\"#7400CC\", \"#0E0ACC\", \"#CC0AA4\", \"#CCAC14\", \"#3ACC14\")\nmy_num <- label_number(big.mark = \",\", suffix = \"\\nwords\")\nmy_pct <- label_number(accuracy = 2, scale = 100, suffix = \"%\")\n\n# Load the separate datasets\nfellowship <- read_csv(\"data/The_Fellowship_Of_The_Ring.csv\")\ntt <- read_csv(\"data/The_Two_Towers.csv\")\nrotk <- read_csv(\"data/The_Return_Of_The_King.csv\")\n\n# bind_rows() stacks data frames on top of each other\nlotr_wide <- bind_rows(fellowship, tt, rotk) %>% \n  # Make the Film column a categorical variable (factor), and put it in the\n  # order the categories appear (so the films are in the correct order)\n  mutate(Film = fct_inorder(Film))\n\n# Make this wide data tidy\nlotr <- lotr_wide %>% \n  # This is the new way to make data long\n  pivot_longer(cols = c(Female, Male), \n               names_to = \"Gender\", values_to = \"Words\")\n```\n:::\n\n\n\\newpage\n\n## Race\n\nDoes a certain race dominate (i.e. speak the most) the entire trilogy? (hint: group by `Race`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace <- lotr %>% \n  group_by(Race) %>% \n  summarise(allwords = sum(Words))\n\nrace %>% \n  ggplot(aes(Race, allwords)) +\n  geom_col(fill = \"#7400CC\") +\n  geom_text(aes(Race, \n                allwords - (allwords / 2), \n                label = my_num(allwords), \n                family = \"serif\"), \n            color = \"#FAA6F5\", \n            size = 9) +\n  scale_y_continuous(labels = label_comma(), \n                     expand = expansion(mult = 0.01, add = 0.1)) +\n  labs(x = NULL,\n       y = \"Total Words\",\n       title = \"Total Words by Race\",\n       subtitle = \"Across the Entire LOTR Trilogy\") +\n  theme_light() +\n  theme(text = element_text(family = \"serif\"),\n        title = element_text(size = 18, \n                             family = \"sans\", \n                             face = \"bold\"),\n        axis.title.y = element_text(size = 16, \n                                    family = \"sans\", \n                                    color = \"#310873\"),\n        axis.text.x = element_text(size = 16, \n                                   family = \"sans\", \n                                   face = \"bold\", \n                                   color = \"#310873\"),\n        axis.text.y = element_text(size = 10, \n                                   color = \"#310873\"),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"#FAA6F5\", linetype = \"dashed\"),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.border = element_blank())\n```\n\n::: {.cell-output-display}\n![](JamieEsmond-03-exercise_files/figure-pdf/race-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n## Gender and film\n\nDoes a certain gender dominate a movie? (lolz of course it does, but still, graph it) (Hint: group by both `Gender` and `Film`.) Experiment with filling by `Gender` or `Film` and faceting by `Gender` or `Film`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngender <- lotr %>% \n  group_by(Gender, Film) %>% \n  summarise(allwords = sum(Words))\n\ngender1 <- gender %>% \n  group_by(Film) %>% \n  summarise(filmwords = sum(allwords)) \n\ngender <- gender1 %>% \n  merge(gender) %>% \n  mutate(pctwords = allwords / filmwords)\n\ngender %>% \n  ggplot(aes(Film, allwords, fill = Gender)) +\n  geom_col() +\n  geom_text(aes(Film,\n                allwords - (allwords / 2),\n                label = my_pct(pctwords),\n                family = \"serif\"),\n            color = \"#FAA6F5\",\n            size = 4) +\n  facet_wrap(~ Gender) +\n  scale_x_discrete(labels = str_wrap(c(\"Fellowship of the Ring\", \n                                       \"Two Towers\", \n                                       \"Return of the King\"), \n                                     width = 9)) +\n  scale_y_continuous(labels = label_comma(), \n                     expand = expansion(mult = 0.01, add = 0.1)) +\n  scale_fill_manual(values = colors, guide = \"none\") +\n  labs(x = NULL,\n       y = \"Total Words\",\n       title = \"Total Words by Gender and Film\") +\n  theme_light() +\n  theme(text = element_text(family = \"serif\"),\n        title = element_text(size = 18, \n                             family = \"sans\", \n                             face = \"bold\"),\n        axis.title.y = element_text(size = 14, \n                                    family = \"sans\", \n                                    color = \"#310873\"),\n        axis.text.x = element_text(size = 10,\n                                   family = \"sans\",\n                                   face = \"bold\",\n                                   color = \"#310873\"),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"#FAA6F5\", linetype = \"dashed\"),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.border = element_blank(),\n        strip.text = element_text(color = \"#310873\", \n                                  face = \"bold\", \n                                  family = \"serif\",\n                                  size = 14),\n        strip.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](JamieEsmond-03-exercise_files/figure-pdf/gender-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n## Race and film\n\nDoes the dominant race differ across the three movies? (Hint: group by both `Race` and `Film`.) Experiment with filling by `Race` or `Film` and faceting by `Race` or `Film`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrfilm <- lotr %>% \n  group_by(Film, Race) %>% \n  summarise(allwords = sum(Words)) \n\nrfilm1 <- rfilm %>% \n  group_by(Film) %>% \n  summarise(filmwords = sum(allwords)) \n\nrfilm <- rfilm1 %>% \n  merge(rfilm) %>% \n  mutate(pctwords = allwords / filmwords)\n\nrfilm %>% \n  ggplot(aes(Film, allwords, fill = Race)) +\n  geom_col() +\n  geom_text(aes(Film,\n                allwords - (allwords / 2),\n                label = my_pct(pctwords),\n                family = \"serif\"),\n            color = \"#FAA6F5\",\n            size = 4) +\n  facet_wrap(~ Race) +\n  scale_y_continuous(labels = label_comma(), \n                     expand = expansion(mult = 0.01, add = 0.1)) +\n  scale_fill_manual(values = colors, guide = \"none\") +\n  scale_x_discrete(labels = str_wrap(c(\"Fellowship of the Ring\", \n                                       \"Two Towers\", \n                                       \"Return of the King\"), \n                                     width = 9)) +\n  labs(x = NULL,\n       y = \"Total Words\",\n       title = \"Total Words by Race and Film\") +\n  theme_light() +\n  theme(text = element_text(family = \"serif\"),\n        title = element_text(size = 18, \n                             family = \"sans\", \n                             face = \"bold\"),\n        axis.title.y = element_text(size = 14, \n                                    family = \"sans\", \n                                    color = \"#310873\"),\n        axis.text.x = element_text(size = 10,\n                                   family = \"sans\",\n                                   face = \"bold\",\n                                   color = \"#310873\"),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.y = element_line(color = \"#FAA6F5\", linetype = \"dashed\"),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.border = element_blank(),\n        strip.text = element_text(color = \"#310873\", \n                                  face = \"bold\", \n                                  family = \"serif\",\n                                  size = 14),\n        strip.background = element_blank())\n```\n\n::: {.cell-output-display}\n![](JamieEsmond-03-exercise_files/figure-pdf/film-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\\newpage\n\n## Race and gender and film\n\nCreate a plot that visualizes the number of words spoken by race, gender, and film simultaneously. Use the complete tidy `lotr` data frame. You don't need to create a new summarized dataset (with `group_by(Race, Gender, Film)`) because the original data already has a row for each of those (you could make a summarized dataset, but it would be identical to the full version).\n\nYou need to show `Race`, `Gender`, and `Film` at the same time, but you only have two possible aesthetics (`x` and `fill`), so you'll also need to facet by the third. Play around with different combinations (e.g. try `x = Race`, then `x = Film`) until you find one that tells the clearest story. For fun, add a `labs()` layer to add a title and subtitle and caption.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlotr %>% \n  ggplot(aes(Words, Gender, fill = Race)) +\n  geom_col(position = position_dodge()) +\n  facet_wrap(~ Film, ncol = 1) +\n  scale_x_continuous(labels = label_comma(),\n                     expand = expansion(mult = 0.01, add = 0.1)) +\n  scale_fill_manual(values = colors) +\n  labs(x = \"Total Words\",\n       y = NULL,\n       fill = NULL,\n       title = \"Gender, Race and Film\",\n       subtitle = \"Words Spoken by Each Race and Gender\",\n       caption = \"Key takeaway: Hobbits are very much in need of feminine representation.\") +\n  theme_light() +\n  theme(text = element_text(family = \"serif\"),\n        title = element_text(size = 18, \n                             family = \"sans\", \n                             face = \"bold\"),\n        axis.title.x = element_text(size = 12, \n                                    family = \"sans\", \n                                    color = \"#310873\"),\n        axis.text.x = element_text(size = 10,\n                                   family = \"sans\",\n                                   face = \"bold\",\n                                   color = \"#310873\"),\n        panel.grid.major.y = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_line(color = \"#FAA6F5\", linetype = \"dashed\"),\n        panel.grid.minor.y = element_blank(),\n        axis.ticks = element_blank(),\n        panel.border = element_blank(),\n        strip.text = element_text(color = \"#310873\", \n                                  face = \"bold\", \n                                  family = \"serif\",\n                                  size = 14),\n        strip.background = element_blank(),\n        legend.position = \"top\",\n        plot.caption = element_text(size = 9, \n                                    family = \"serif\", \n                                    color = \"#310873\"))\n```\n\n::: {.cell-output-display}\n![](JamieEsmond-03-exercise_files/figure-pdf/alltogethernow-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "JamieEsmond-03-exercise_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}